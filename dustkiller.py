import datetime
import random
import threading
import datetime
import time


class Box:
    def __init__(self, width, height):
        self.width = width
        self.height = height

class Room:
    def __init__(self, name: str, box: Box, connected_rooms: list = [], square=0):
        self.name = name
        self.box: Box = box
        self.connected_rooms = connected_rooms
        self.square = square


class DustKiller:
    def __init__(self, rooms):
        self.voice = "Default"
        self.name = "Dustkiller3000"
        self.speed = 1
        self.x = 0
        self.y = 0
        self.now_room = "–ù–∞ –∑–∞—Ä—è–¥–∫–µ"
        self.rooms = rooms
        self.start_now = False
        self.do_clean = False
        self.schedule = []
        self.battery_level = random.randint(0, 100)
        # self.dust_bag = 98.9
        self.dust_bag = 0
        self.need_clean_bug = False

    def start(self):
        if (self.battery_level < 15):
            self.log("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å –º–µ–Ω—è –Ω–∞ –∑–∞—Ä—è–¥–∫—É")
            self.go_to_charge()
        else:
            self.log("–ù–∞—á–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")

        self.scan_rooms()
        self.log("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        self.start_check_schedule()

    def scan_rooms(self):
        for room in self.rooms:
            self.now_room = room.name
            self.move_over_room(room)
            room.square = self.find_square(room)
            self.log(f'–ü–ª–æ—â–∞–¥—å –∫–æ–º–Ω–∞—Ç—ã "{room.name}" = {room.square}')
            if(self.rooms[-1] != room):
                self.go_to_another_room()
        self.log("üì±–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    def start_check_schedule(self):
        if(datetime.time.hour in self.schedule):
            self.start_clean()
        elif(self.start_now == True):
            self.start_clean()
            self.start_now = False
        else:
            self.log("–£–±–æ—Ä–∫–∞ –Ω–∞ —Å–µ–π—á–∞—Å –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
        threading.Timer(random.randint(0, 3),
                        self.start_check_schedule).start()

    def move_over_room(self, room: Room):
        self.move(0, 0)
        self.move(room.box.height, 0)
        self.move(room.box.width, room.box.height)
        self.move(room.box.width, 0)

    def go_to_another_room(self):
        self.log("üö∂‚Äç‚ôÄÔ∏è–ò–¥—É –≤ –¥—Ä—É–≥—É—é –∫–æ–º–Ω–∞—Ç—É")

    def find_square(self, room: Room):
        return room.box.width * room.box.height

    def create_schedule(self, schedule, start_now):
        self.start_now = start_now
        self.schedule = schedule
        self.log("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")

    def start_clean(self):
        self.log("‚ôª –ù–∞—á–∞—Ç–∞ —É–±–æ—Ä–∫–∞")
        for room in self.rooms:
            self.now_room = room.name
            self.move_over_room(room)
            self.log(f'‚ôª –ö–æ–º–Ω–∞—Ç–∞ "{room.name}" —É—Å–ø–µ—à–Ω–∞ –æ—á–∏—â–µ–Ω–∞')
            if(self.rooms[-1] != room):
                self.go_to_another_room()
        self.log("‚ôª –£–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        self.go_to_charge()

    def go_to_charge(self):
        self.now_room = "–ù–∞ –∑–∞—Ä—è–¥–∫–µ"
        self.log("–ò–¥—É –Ω–∞ –∑–∞—Ä—è–¥–∫—É")
        self.log("‚ö° –ó–∞—Ä—è–∂–∞—é—Å—å")
        self.battery_level = 100
        self.log(f"–£—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏ {self.battery_level}%")

    def move(self, x, y):
        self.x = x
        self.y = y
        time.sleep(random.randint(0, 2))
        self.check_battery()
        time.sleep(random.randint(0, 2))
        self.check_dust_bag()
        self.log(f"–Ø –ø–µ—Ä–µ–¥–≤–∏–Ω—É–ª—Å—è –Ω–∞ x: {self.x}, y: {self.y}")
        time.sleep(random.randint(0, 2))

    def check_battery(self):
        self.battery_level = self.battery_level-1
        if(self.battery_level < 15):
            self.go_to_charge()
        self.log(f"–£—Ä–æ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ–∏ {self.battery_level}%")

    def check_dust_bag(self):
        self.dust_bag = self.dust_bag+0.3
        self.log(f"–ù–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –º–µ—à–∫–∞ —Å –ø—ã–ª—å—é {self.dust_bag}%")
        if(self.dust_bag > 90):
            self.need_clean_bug = True
            self.log("‚ùå –ü–û–ñ–ê–õ–£–ô–°–¢–ê, –æ—á–∏—Å—Ç–∏—Ç–µ –º–µ—à–æ–∫ —Å –ø—ã–ª—å—é")
            self.log("‚ùå –ò–Ω–∞—á–µ —è –Ω–µ —Å–º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å")
            input()
            self.need_clean_bug = False
            self.dust_bag = 0
            self.log("‚úÖ –ú–µ—à–æ–∫ –æ—á–∏—â–µ–Ω, —Å–ø–∞—Å–∏–±–æ, –ø—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å")

    def log(self, text):
        now = datetime.datetime.now()
        print(f'[{now.strftime("%H:%M:%S")}] {self.name}: {text}')


class User():
    def __init__(self, name):
        self.name = name

    def activate_device(self, device):
        print(f'{self.name}: –Ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device.name}')
        device.start()

    def create_schedule(self, device, schedule, start_now=False):
        print(f'{self.name}: –ó–∞–¥–∞–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {device.name}')
        device.create_schedule(schedule, start_now)


def start_dust_killer():
    living_room = Room("–ñ–∏–ª–∞—è –∫–æ–º–Ω–∞—Ç–∞", Box(4, 4),)
    kitchen = Room("–ö—É—Ö–Ω—è", Box(2, 2), )
    corridor = Room("–ö–æ—Ä–∏–¥–æ—Ä", Box(1, 3),
                    connected_rooms=[living_room, kitchen])
    kitchen.connected_rooms = [corridor]
    living_room.connected_rooms = [corridor]
    rooms = [living_room, corridor, kitchen, ]

    dimas = User("–î–º–∏—Ç—Ä–∏–π")

    dustKiller = DustKiller(rooms)

    dimas.create_schedule(dustKiller, [12, 16, 18], start_now=True)
    dimas.activate_device(dustKiller)


# start_dust_killer()
